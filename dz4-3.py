"""
Розробіть скрипт, який приймає шлях до директорії в якості аргументу командного рядка і візуалізує структуру
цієї директорії, виводячи імена всіх піддиректорій та файлів. Для кращого візуального сприйняття,
імена директорій та файлів мають відрізнятися за кольором.

Вимоги до завдання:

Створіть віртуальне оточення Python для ізоляції залежностей проєкту.
Скрипт має отримувати шлях до директорії як аргумент при запуску. Цей шлях вказує, де знаходиться директорія,
структуру якої потрібно відобразити.
Використання бібліотеки colorama для реалізації кольорового виведення.
Скрипт має коректно відображати як імена директорій, так і імена файлів, використовуючи рекурсивний спосіб обходу
директорій (можна, за бажанням, використати не рекурсивний спосіб).
Повинна бути перевірка та обробка помилок, наприклад, якщо вказаний шлях не існує або він не веде до директорії.

Рекомендації для виконання:

Спочатку встановіть бібліотеку colorama. Для цього створіть та активуйте віртуальне оточення Python,
а потім встановіть пакет за допомогою pip.
Використовуйте модуль sys для отримання шляху до директорії як аргументу командного рядка.
Для роботи з файловою системою використовуйте модуль pathlib.
Забезпечте належне форматування виводу, використовуючи функції colorama.

Критерії оцінювання:
Створення та використання віртуального оточення.
Правильність отримання та обробки шляху до директорії.
Точність виведення структури директорії.
Коректне застосування кольорового виведення за допомогою colorama.
Якість коду, включаючи читабельність, структурування та коментарі.
"""

from pathlib import Path
from colorama import Fore
import sys


# dirname = r'C:\PythonProject\PythonCoreCourse\dz4'

# кодові констатнти юнікода для піктограмм папки і файлу
folder_pic = '\U0001F4C2'
file_pic = '\U0001F4C4'

# створимо рекурсивнц функцію для проходу по дереву каталогів


def tree(path: Path, head='', tail=''):

    # випадок коли обьект каталог
    if path.is_dir():
        # виводимо строку з його імьям і структурою дерева на цьому кроці
        print(Fore.YELLOW + head + folder_pic +
              Fore.BLUE + path.name + Fore.RESET)
        # зробимо перелік підкаталогів і відсортуємо його
        entries = sorted(path.iterdir())
        # ітеруємось по списку відслідковуючи лічильник для правильного графічного відтворення лерева каталогів
        # оскільки це рекурсивний випадок то функція викликає себе передаючи потрібну інофоормацію
        for i, entry in enumerate(entries):
            if i < len(entries) - 1:
                tree(entry, tail + '├──', tail + '│  ')
            else:
                tree(entry, tail + '└──',  tail + '   ')
    # базовий випадок. ми знайшли файл кінець рекурсивних викликів. малюємо файл повертаємось на один виклик назад
    else:
        print(Fore.YELLOW + head + file_pic +
              Fore.LIGHTGREEN_EX + path.name + Fore.RESET)


def main():
    dirname = '.' if len(sys.argv) == 1 else sys.argv[1]
    # також можна використовати Path.cwd() в випадку якшо шлях не задано

    # перетворимо шлях до папки в обьект Path
    dirname = Path(dirname)
    # перевіримо чи шлях існує та чи то не файл
    if not Path(dirname).exists() or Path(dirname).is_file():
        print('Шлях вказаний невірно, спробуйте ще раз')
        sys.exit()
    # виклик нашої рекурсивної функції
    tree(dirname)
    input('Для виходу з програми нажміть Enter')


if __name__ == '__main__':
    main()
